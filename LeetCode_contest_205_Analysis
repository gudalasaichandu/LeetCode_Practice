Q1:---Replace All ?'s to Avoid Consecutive Repeating Characters

Given a string s containing only lower case English letters and the '?' character, convert all the '?' characters into lower case letters such that the final string does not contain any consecutive repeating characters. You cannot modify the non '?' characters.
It is guaranteed that there are no consecutive repeating characters in the given string except for '?'.
Return the final string after all the conversions (possibly zero) have been made. If there is more than one solution, return any of them. It can be shown that an answer is always possible with the given constraints.

Example:
Input: s = "?zs"
Output: "azs"
Explanation: There are 25 solutions for this problem. From "azs" to "yzs", all are valid. Only "z" is an invalid modification as the string will consist of consecutive repeating characters in "zzs".

MyCode:
class Solution:
    def modifyString(self, s: str) -> str:
        s=list(s)
        if len(s)==1 and s[0]=='?':
            return 'a'
        for i in range(len(s)):
            if s[i]=="?":
                if i==0:
                    for k in range(26):
                        if chr(97+k)!=s[i+1]:
                            s[i]=chr(97+k)
                            break
                            
                elif i==len(s)-1:
                    for k in range(26):
                        if chr(97+k)!=s[i-1]:
                            s[i]=chr(97+k)
                            break
                
                else:
                    for k in range(26):
                        if chr(97+k)!=s[i-1] and chr(97+k)!=s[i+1]:
                            s[i]=chr(97+k)
                            break
        return ''.join(s)



Top Code: 
class Solution(object):
    def modifyString(self, S):
        A = list(S)
        N = len(A)
        for i, c in enumerate(A):
            if c == '?':
                for c2 in string.ascii_lowercase:
                    if (i == 0 or c2 != A[i-1]) and (i == N-1 or c2 != A[i+1]):
                        A[i] = c2
                        break
        return "".join(A)
        
        
  --------------------------------------------------------------------------------------------------------------------------------
  
  
  Q2:---Number of Ways Where Square of Number Is Equal to Product of Two Numbers
  
  Given two arrays of integers nums1 and nums2, return the number of triplets formed (type 1 and type 2) under the following rules:

Type 1: Triplet (i, j, k) if nums1[i]2 == nums2[j] * nums2[k] where 0 <= i < nums1.length and 0 <= j < k < nums2.length.
Type 2: Triplet (i, j, k) if nums2[i]2 == nums1[j] * nums1[k] where 0 <= i < nums2.length and 0 <= j < k < nums1.length.
 
 Example 1:

Input: nums1 = [7,4], nums2 = [5,2,8,9]
Output: 1
Explanation: Type 1: (1,1,2), nums1[1]^2 = nums2[1] * nums2[2]. (4^2 = 2 * 8). 

Top Code:
class Solution(object):
    def numTriplets(self, A, B):
        from collections import Counter
        countA = Counter()
        countB = Counter()
        for i, x in enumerate(A):
            for j in xrange(i+1, len(A)):
                y = A[j]
                countA[x * y] += 1
        for i, x in enumerate(B):
            for j in xrange(i+1, len(B)):
                y = B[j]
                countB[x * y] += 1
        ans = 0
        for i, x in enumerate(A):
            ans += countB[x * x]
        for i, x in enumerate(B):
            ans += countA[x * x]
        return ans
        
        
      --------------------------------------------------------------------------------------------------------------------------------
      
      
Q3:----Minimum Deletion Cost to Avoid Repeating Letters
      
Given a string s and an array of integers cost where cost[i] is the cost of deleting the character i in s.
Return the minimum cost of deletions such that there are no two identical letters next to each other.
Notice that you will delete the chosen characters at the same time, in other words, after deleting a character, the costs of deleting other characters will not change.

Example 1:

Input: s = "abaac", cost = [1,2,3,4,5]
Output: 3
Explanation: Delete the letter "a" with cost 3 to get "abac" (String without two identical letters next to each other).

MyCode:
class Solution:
    def minCost(self, s: str, cost: List[int]) -> int:
        if len(set(s))==1:
            return sum(cost)-max(cost)
        s=list(s)
        count=0
        i=1
        #print(set(s))
        if set(s)==1:
            return min(cost)
        
        length=len(s)
        while i<length:
            if s[i-1]==s[i]:
                if cost[i-1]<cost[i]:
                    count+=cost[i-1]
                    s.remove(s[i-1])
                    cost.pop(i-1)

                else:
                    count+=cost[i]
                    s.remove(s[i])
                    cost.pop(i)
    
                    
                length-=1
            else:
                i+=1
            #print(count)
        #print(cost)
        return count
                
            
 Top Code:
 
 class Solution(object):
    def minCost(self, S, cost):
        ans = i = 0
        for k, grp in itertools.groupby(S):
            A = list(grp)
            W = len(A)
            if len(A) == 1:
                i += W
                continue
            
            m = max(cost[i+j] for j in xrange(W))
            s = sum(cost[i+j] for j in xrange(W))
            s -= m
            ans += s
            i += W
        return ans
        
  Q4:---Remove Max Number of Edges to Keep Graph Fully Traversable
  
  Alice and Bob have an undirected graph of n nodes and 3 types of edges:

Type 1: Can be traversed by Alice only.
Type 2: Can be traversed by Bob only.
Type 3: Can by traversed by both Alice and Bob.
Given an array edges where edges[i] = [typei, ui, vi] represents a bidirectional edge of type typei between nodes ui and vi, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.

Return the maximum number of edges you can remove, or return -1 if it's impossible for the graph to be fully traversed by Alice and Bob.

Example 1:



Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]
Output: 2
Explanation: If we remove the 2 edges [1,1,2] and [1,1,3]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2.


TopCode:
class DSU:
    def __init__(self, N):
        self.par = list(range(N))
        self.sz = [1] * N

    def find(self, x):
        if self.par[x] != x:
            self.par[x] = self.find(self.par[x])
        return self.par[x]

    def union(self, x, y):
        xr, yr = self.find(x), self.find(y)
        if xr == yr:
            return False
        if self.sz[xr] < self.sz[yr]:
            xr, yr = yr, xr
        self.par[yr] = xr
        self.sz[xr] += self.sz[yr]
        self.sz[yr] = self.sz[xr]
        return True

    def size(self, x):
        return self.sz[self.find(x)]

class Solution(object):
    def maxNumEdgesToRemove(self, N, edges):
        for row in edges:
            # row[0] -= 1
            row[1] -= 1
            row[2] -= 1
        alice = []
        bob = []
        both = []
        
        for t, u, v in edges:
            if t == 1:
                alice.append([u,v])
            elif t==2:
                bob.append([u,v])
            else:
                both.append([u,v])
        dsu1 = DSU(N)
        dsu2 = DSU(N)
        ans = 0
        for u,v  in both:
            dsu2.union(u,v)
            if not dsu1.union(u, v):
                ans += 1
        for u,v  in alice:
            if not dsu1.union(u,v): ans += 1
        for u,v in bob:
            if not dsu2.union(u,v): ans += 1
        
        if dsu1.size(0) != N:
            return -1
        if dsu2.size(0) != N:
            return -1
        return ans
--------------------------------


Code Credits: @awice
