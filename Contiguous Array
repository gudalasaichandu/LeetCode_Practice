# Code

class Solution:
    def findMaxLength(self, nums: List[int]) -> int:
        res=0
        count=0
        seta={}
        seta[0]=-1       #set[value]=index
        for  i in range(len(nums)):
            if nums[i]==0:
                count-=1
            else:
                count+=1
            
            if count in seta:  
                res=max(res,i-seta[count])  # checking the initial index of the count value(valley)
                
            else:
                seta[count]=i  #if count is itself initial one
        return res
        
     Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.

Example 1:
Input: [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.
Example 2:
Input: [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.
